name: Build release

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
  pull_request:

jobs:
  fetch_latest_version:
    name: Fetch Latest Version
    runs-on: ubuntu-latest
    steps:
      - name: Install curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Configure Variables
        id: fetch_and_configure
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version="${{ github.ref_name }}"
            release_name="${{ github.ref_name }} Release"
          else
            response=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -L "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            version=$(echo "$response" | jq -r .tag_name)
            release_name=$(echo "$response" | jq -r .name)
          fi

          build_time=$(TZ=Asia/Shanghai date '+%Y%m%d%H%M')

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "build_time=$build_time" >> $GITHUB_OUTPUT

          if [[ "$version" != "null" && -n "$version" && "$release_name" != "null" && -n "$release_name" ]]; then
            echo "can_release=true" >> $GITHUB_OUTPUT
          else
            echo "can_release=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      version: ${{ steps.fetch_and_configure.outputs.version }}
      release_name: ${{ steps.fetch_and_configure.outputs.release_name }}
      build_time: ${{ steps.fetch_and_configure.outputs.build_time }}
      can_release: ${{ steps.fetch_and_configure.outputs.can_release }}
      # This has already been written into the environment variables, so this is redundant. ðŸ˜…
      # Retain the usage ${{ env.version }}

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: archlinux
            version: current
          - os: alpine
            version: edge
          - os: centos
            version: 9-Stream
          - os: debian
            version: bookworm
          - os: fedora
            version: 41
          - os: kali
            version: current
          - os: ubuntu
            version: oracular
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y zip

      - name: Package for OS ${{ matrix.os }} Version ${{ matrix.version }}
        run: |
          sed -i "s|^RURIMA_LXC_OS=.*|RURIMA_LXC_OS=${{ matrix.os }}|g" config.conf
          sed -i "s|^RURIMA_LXC_OS_VERSION=.*|RURIMA_LXC_OS_VERSION=${{ matrix.version }}|g" config.conf
          sed -i "s|^CONTAINER_DIR=.*|CONTAINER_DIR=/data/${{ matrix.os }}|g" config.conf

          zip -r "./asl-${{ matrix.os }}-${{ matrix.version }}.zip" . -x \
              "*.git/*" \
              ".github/*" \
              "update.json" \
              "changelog.md"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: asl-${{ matrix.os }}-${{ matrix.version }}
          path: ./asl-${{ matrix.os }}-${{ matrix.version }}.zip

  release:
    name: Release
    needs: [fetch_latest_version, build]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && needs.fetch_latest_version.outputs.can_release == 'true') ||
      startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download All Build Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: List Downloaded Files
        run: ls -lh ./artifacts

      - name: Flatten Artifact Files
        run: |
          find ./artifacts -type f -name "*.zip" -exec mv {} ./ \;

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.fetch_latest_version.outputs.version }}
          name: ${{ needs.fetch_latest_version.outputs.release_name }}
          body: |
            You can only install one of these modules.
          prerelease: false
          files: |
            ./*.zip
